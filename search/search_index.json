{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadStore Basic","text":"<p>The Lean Solution for Managing NGS and Omics Data  </p> <p>ReadStore is a platform for storing, managing, and integrating omics data. It speeds up analysis and offers a simple way of managing and sharing NGS omics datasets, metadata and processed data (Processed Data). Built-in project and metadata management structures your workflows and a collaborative user interface enhances teamwork \u2014 so you can focus on generating insights.</p> <p>The integrated API enables you to directly retrieve data from ReadStore via the terminal Command-Line Interface (CLI) or Python / R SDKs.</p> <p>The ReadStore Basic version offers a local web server with simple user management. If you need organization-wide deployment, advanced user and group management, or cloud integration, please check the ReadStore Advanced versions and reach out to info@evo-byte.com.</p> <p>Find more information on www.evo-byte.com/readstore</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>The easiest way to get started with ReadStore is through the free 30-day trial version, which you can install on your local Linux server or PC via PyPI, the Python package repository, using pip, the Python package manager.</p>"},{"location":"#prerequisite","title":"Prerequisite","text":"<p>Before proceeding, you need to obtain a free trial license key, which will be sent to you via email.</p>"},{"location":"#installation","title":"Installation","text":"<p>Follow the installation steps described in the README section. Make sure to review and follow the points related to security and permissions management.</p> <p>For technical questions or problems with the install please contact support@evo-byte.com</p>"},{"location":"#tutorials-how-tos","title":"Tutorials &amp; How-Tos","text":"<p>We support you getting started with ReadStore with a YouTube playlist containing easy-to-follow examples for the basic functionalities, blog posts with step-by-step instructions and more in-depth information in the Readme files.</p>"},{"location":"#video-tutorials","title":"Video Tutorials","text":"<p>Here is a full playlist which provides tutorials and explains different features of ReadStore. </p>"},{"location":"#blog","title":"Blog","text":""},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v141-2025-02-11","title":"v1.4.1 - 2025-02-11","text":"<p>Bugfix</p> <ul> <li>Restrict permissions to create and update projects in case of missing staging permissions</li> <li>Update fq file if validation when updating datasets via external API</li> </ul>"},{"location":"CHANGELOG/#v140-2025-02-10","title":"v1.4.0 - 2025-02-10","text":"<p>Added</p> <ul> <li>ProData page in dashboard</li> </ul> <p>Changed</p> <ul> <li>Improved database storage of attachment files</li> </ul> <p>Bugfix - Change tab layout for better transistions in detail view</p>"},{"location":"CHANGELOG/#v136-2025-01-10","title":"v1.3.6 - 2025-01-10","text":"<p>Added</p> <ul> <li>Improved validation of API requests</li> <li>Adapted error message if user is inactive</li> </ul> <p>Changed</p> <ul> <li>Selection of existing empty datasets to attach FASTQ files in staging area to</li> </ul> <p>Bugfix</p> <ul> <li>Validate file path for upload of FASTQ files from template files. Only accept template upload if ALL FASTQ file path are found</li> <li>Error when updating readstore_config.yaml during update cycles</li> </ul>"},{"location":"CHANGELOG/#v133v134-2024-12-23","title":"v1.3.3/v1.3.4 - 2024-12-23","text":"<p>Bugfix</p> <ul> <li>Install Process Validation of Requirements</li> </ul>"},{"location":"CHANGELOG/#v132-2024-12-23","title":"v1.3.2 - 2024-12-23","text":"<p>Changed</p> <ul> <li>Require update Django Rest Framework</li> </ul> <p>Bugfix</p> <ul> <li>Install Process Validation of Requirements</li> </ul>"},{"location":"CHANGELOG/#v132-2024-12-21","title":"v1.3.2 - 2024-12-21","text":"<p>Bugfix</p> <ul> <li>Install Process</li> </ul>"},{"location":"CHANGELOG/#v130-2024-12-20","title":"v1.3.0 - 2024-12-20","text":"<p>Added</p> <ul> <li>Create API Endpoints to create, update, and delete Projects, Datasets, FASTQ files via the CLI</li> <li>Crete Datasets from ReadStore Web App</li> <li>Options to check-in staged FASTQ Files to existing Datasets</li> <li>Attachent also work for Batch Import </li> <li>Add new filter options for metadata</li> <li>Option to transfer ownership of objects like datasets between users</li> </ul> <p>Changed</p> <ul> <li>Re-enter new password required when changing or resetting User passwords</li> <li>Align formatting of Project and Dataset dialogs</li> <li>Update streamlit settings to 1.41</li> </ul> <p>Removed</p>"},{"location":"CHANGELOG/#v120-2024-12-01","title":"v1.2.0 - 2024-12-01","text":"<p>Added</p> <ul> <li>Management of Processed Data (ProData)</li> <li>Extend Dataset App page with ProData functions</li> <li>Add RSClientTokenAuth Token Based View Authentication</li> <li>Add option RSClientHasStaging</li> <li>Add automatic validation of file paths stored in ReadStore DB</li> </ul> <p>Changed</p> <ul> <li>New endpoint for external API calls (api_x_v1)</li> <li>Update streamlit settings to 1.40</li> </ul> <p>Removed - Deprecate/token API mechanism</p>"},{"location":"CHANGELOG/#v110-2024-11-14","title":"v1.1.0 - 2024-11-14","text":"<p>Added</p> <ul> <li>Support for batch Check In of many FASTQ files</li> <li>Batch Upload of FASTQ files from Excel or csv files</li> <li>Batch delete function</li> <li>Frontend performance improvements</li> </ul> <p>Changed</p> <ul> <li>Option to select multiple datasets and projects</li> </ul> <p>Removed</p>"},{"location":"CHANGELOG/#v103-2024-11-06","title":"v1.0.3  - 2024-11-06","text":"<p>Added</p> <p>Changed</p> <ul> <li>Fix: Python version in setup</li> <li>Doc: Minor documentatation</li> </ul> <p>Removed</p>"},{"location":"CHANGELOG/#v102","title":"v1.0.2","text":"<p>Added</p> <p>Changed</p> <ul> <li>Fix: Performance related Backend Updates</li> <li>Refactor: Sizing of attachment detail fields and download button</li> </ul> <p>Removed</p>"},{"location":"CHANGELOG/#v101","title":"v1.0.1","text":"<p>Added - 2024-10-31</p> <p>Changed</p> <ul> <li>Fix: Hide dataset update button if no dataset is selected</li> </ul> <p>Removed</p>"},{"location":"CHANGELOG/#v100-2024-10-30","title":"v1.0.0 - 2024-10-30","text":"<p>Initial Version</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide contains information how to setup and install ReadStore Basic along with potential errors and information on different Linux distributions.</p> <p>The full ReadStore Basic documentation is available here.</p> <p>For general questions reach out to info@evo-byte.com or in case of technical problems to support@evo-byte.com</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Install</li> <li>Update</li> <li>Python Versions and Dependency Management</li> <li>Common Errors and Solutions</li> <li>Examples Installing ReadStore on Different Distributions</li> </ol>"},{"location":"installation/#1-install","title":"1. Install","text":"<p>It is recommended to use ReadStore Basic using the Python package manager <code>pip</code>. Make sure that pip is installed and available by running <code>pip --version</code>.</p> <p>You need Python version 3.10 or higher to install ReadStore.</p> <p>You can perform the install in a conda or venv virtual environment to simplify package management. This is recommended to avoid potential conflicts in the required Python dependencies.</p> <p>Here is an example how to setup a virtual environment using the venv module. You can find more examples how to setup venv on different environments below.</p> <p><code>python -m venv .venv</code></p> <p><code>source .venv/bin/activate</code></p> <p>This provides you with a clean virtual environment avoiding potential issues with resolving Python dependencies. </p> <p>Next install the ReadStore Basic server.</p> <p><code>pip3 install readstore-basic</code></p> <p>A local install is also possible:</p> <p><code>pip3 install --user readstore-basic</code></p> <p>Make sure that <code>~/.local/bin</code> is on your <code>$PATH</code> in case you encounter problems when starting the server.</p> <p>Validate the install by running</p> <p><code>readstore-server -v</code></p> <p>This should print the ReadStore Basic version</p>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>You can also download and install the <code>readstore-basic</code> package by downloading the source or built distribution after downloading the packages from PyPI Repository.</p> <p>More information on how to install source packages can be found here.</p>"},{"location":"installation/#2-update","title":"2. Update","text":"<p>If you already have a running ReadStore Server and want to upgrade to a new version, follow these simple steps:</p> <p>0. Backup Validation</p> <p>Ensure that ReadStore database backups are in place and up-to-date (located in the --db-directory folder). Optionally, copy the latest backup file (.sqlite3) to a secure location for potential rollback.</p> <p>1. Stop the Running Server</p> <p>Stop the running server by terminating the server process or stopping the corresponding Linux service. This will not affect the data.</p> <p>2. Update the ReadStore-Basic Python Package</p> <p>Within the Python environment used to run the ReadStore Server, update the <code>readstore-basic</code> package by running the following command:</p> <p><code>pip install readstore-basic --upgrade</code></p> <p>After updating, verify that the new version is installed and the old version is removed:</p> <p><code>readstore-server -v</code></p> <p>This command should print the new version number.</p> <p>3. Restart the Server</p> <p>Restart the ReadStore Server with the same folder directories and settings as before the update.</p>"},{"location":"installation/#3-python-versions-and-dependency-management","title":"3. Python Versions and Dependency Management","text":""},{"location":"installation/#python-version","title":"Python version","text":"<p>ReadStore Basic strictly requires Python version 3.10 or above for installation. If your current Python version does not fulfill those requiements, you will receive an error like:</p> <pre><code>ERROR: Could not find a version that satisfies the requirement readstore-basic (from versions: none)\nERROR: No matching distribution found for readstore-basic\n</code></pre>"},{"location":"installation/#managing-multiple-python-versions","title":"Managing multiple Python versions","text":"<p>It is possible that multiple Python version are installed at the same time on your system. This can cause issues in managing a valid Python environment with correct dependencies and lead to unexpected errors.</p> <p>It is highly recommended to operate in virtual environments using the Python <code>venv</code> module or a conda environment. This will help managing consistent dependencies, also in cases that multiple Python versions are installed.</p> <p>In any cases you need to ensure that the <code>python3</code> command is available on you system before starting the ReadStore server.</p> <p><code>python3 --version</code></p> <p>Run the version command and make sure you see the right Python version. If your Python binary cannot be reached, it is possible to configure other paths or aliases in the config. Please get in touch for more information.</p>"},{"location":"installation/#4-common-errors-and-solutions","title":"4. Common Errors and Solutions","text":""},{"location":"installation/#wrong-python-version","title":"Wrong Python version","text":"<p>Your current Python version is below Python 3.10, which will lead to an error like:</p> <pre><code>ERROR: Could not find a version that satisfies the requirement readstore-basic (from versions: none)\nERROR: No matching distribution found for readstore-basic\n</code></pre> <p>Solution Update your systems Python version or install conda environment with newer Python version.</p>"},{"location":"installation/#error-installing-package-via-python-pip","title":"Error Installing package via Python pip","text":"<p>In case that a package manager is managing a Python environment, you may encounter errors when trying to install <code>readstore-basic</code> via Python pip.</p> <pre><code>error: externally-managed-environment\n</code></pre> <p>Solution In this case you may need to setup a virtual environment using <code>venv</code> module or usign a conda environment.</p> <p>The venv environment can be installed using on your system using for instance the apt package manager <code>sudo apt install python3-venv</code></p> <p><code>python -m venv .venv</code></p> <p><code>source .venv/bin/activate</code></p>"},{"location":"installation/#5-example-install-on-different-distributions","title":"5. Example Install on different Distributions","text":"<p>Here you can find a number of examples for setting up a ReadStore Basic server on different distributions. Those examples were tested on AWS EC2 Instances with different Linux distributions, starting from an empty environment.</p>"},{"location":"installation/#ubuntu-2404","title":"Ubuntu 24.04","text":"<p>ReadStore Basic install using venv virtual environment. Installed Python v3.12.</p> <pre><code>sudo apt-get update\n\nsudo apt-get upgrade -y\n\nsudo apt-get install python3-venv\n\npython3 -m venv .venv\n\nsource .venv/bin/activate\n\npip3 install readstore-basic\n\nreadstore-server --db-directory readstore_dir --db-backup-directory readstore_backup_dir --log-directory readstore_log_dir\n</code></pre>"},{"location":"installation/#debian-12","title":"Debian 12","text":"<p>ReadStore Basic install using venv virtual environment. Installed Python v3.11.</p> <pre><code>sudo apt-get update\n\nsudo apt-get upgrade -y\n\nsudo apt-get install python3-venv\n\npython3 -m venv .venv\n\nsource .venv/bin/activate\n\npip3 install readstore-basic\n\nreadstore-server --db-directory readstore_dir --db-backup-directory readstore_backup_dir --log-directory readstore_log_dir\n</code></pre>"},{"location":"installation/#amazon-linux-2023","title":"Amazon Linux 2023","text":"<p>Installed Python v3.9 version. Requires update of Python before installing ReadStore.</p> <pre><code>sudo yum update\n\nsudo yum upgrade -y\n\nsudo yum install python3.11\n\npython3.11 -m venv .venv\n\nsource .venv/bin/activate\n\npip3 install readstore-basic\n\nreadstore-server --db-directory readstore_dir --db-backup-directory readstore_backup_dir --log-directory readstore_log_dir\n</code></pre>"},{"location":"readme/","title":"Readme","text":""},{"location":"readme/#readstore-basic","title":"ReadStore Basic","text":"<p>This README introduces ReadStore Data Platform, the lean solution for managing NGS and omics data.</p> <p>The full ReadStore Basic documentation is available here </p> <p>Please read and follow the instructions carefully. In particular the Security, Permissions and Backup section contains important information related to data security and backup. In case of problems with the install or information on different Linux distributions, please check the separate Installation Guide.</p> <p>You need a license key for using ReadStore Basic, please check the ReadStore website for more information or reach out to license@evo-byte.com</p> <p>Start with the ReadStore Intro and Tutorials: https://www.youtube.com/@evobytedigitalbio</p> <p>Blog posts and How-Tos: https://evo-byte.com/blog/</p> <p>For general questions reach out to info@evo-byte.com or in case of technical problems to support@evo-byte.com</p> <p>Happy analysis :)</p>"},{"location":"readme/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Description</li> <li>Security, Permissions and Backup</li> <li>Installation<ul> <li>Update an existing ReadStore Server</li> <li>Advanced Server Configuration</li> <li>Configure systemd Service</li> <li>Export Database to File</li> </ul> </li> <li>ReadStore API</li> <li>Usage<ol> <li>Account Settings</li> <li>Upload Files</li> <li>Stage Files</li> <li>Access Datasets via the CLI</li> <li>Managing Processed Data</li> </ol> </li> <li>Contributing</li> <li>License</li> <li>Credits and Acknowledgments</li> </ul>"},{"location":"readme/#the-lean-solution-for-managing-ngs-and-omics-data","title":"The Lean Solution for Managing NGS and Omics Data","text":"<p>ReadStore is a platform for storing, managing, and integrating omics data. It speeds up analysis and offers a simple way of managing and sharing NGS omics datasets, metadata and processed data (Processed Data). Built-in project and metadata management structures your workflows and a collaborative user interface enhances teamwork \u2014 so you can focus on generating insights.</p> <p>The integrated Webservice enables you to directly retrieve data from ReadStore via the terminal Command-Line Interface (CLI) or Python / R SDKs.</p> <p>The ReadStore Basic version offered here provides a local web server with simple user management. If you need organization-wide deployment, advanced user and group management, or cloud integration, please check the ReadStore Advanced versions and reach out to info@evo-byte.com.</p>"},{"location":"readme/#description","title":"Description","text":"<p>ReadStore facilitates managing FASTQ files, NGS and Omics data, along with experimental (meta)data and Processed Dataset. It provides a database and a web app with a simple user interface to create and edit datasets and projects. You can create your own structure using metadata key-value pairs (e.g., replicate: 1 or condition: control) or attach files as additional information.</p> <p>Metadata, file attachments and processed datasets (ProData) can be accessed along with your NGS datasets from analysis scripts or data pipelines, providing consistent workflow automation.</p> <p>ReadStore Basic enables you to manage NGS data from your local Linux environment and can be set up in a few minutes. It comprises a local web server and web app that you can connect to via your browser to explore and edit your NGS experiments.</p> <p>To upload FASTQ files and Processed Data from the command line into the ReadStore database, you\u2019ll also need to install the ReadStore CLI.</p> <p>Logging into the ReadStore web app via the browser requires a user account. User accounts are created from the Admin account, which is setup by default.</p> <p>ReadStore Basic provides a shared work environment for all registered users. Users can collaborate on editing datasets, projects, metadata, and attachments, with shared access to all resources. This facilitates cross-functional projects, connecting data analysts and experimental researchers.</p> <p>The ReadStore database can be accessed programmatically using the Command-Line Interface (CLI) or Python &amp; R SDKs. This facilitates easy integration into bioinformatics pipelines and downstream analysis workflows.</p> <p>If you would like to have more advanced user, group, and permission management, please reach out for a demo of the ReadStore Advanced version.</p>"},{"location":"readme/#security-permissions-and-backup","title":"Security, Permissions and Backup","text":"<p>PLEASE READ AND FOLLOW THESE INSTRUCTIONS CAREFULLY!</p> <p>ReadStore Basic comes with simple security and permission management based on Linux file permissions, which govern access to the ReadStore database.</p>"},{"location":"readme/#database-permissions","title":"Database Permissions","text":"<p>The Linux user running the <code>readstore-server</code> is, by default, the Data Owner. In this role, the Data Owner has exclusive read/write permissions (<code>chmod 600</code>) to the database files, database backups, secret key, and ReadStore configuration.</p> <p>The Data Owner must ensure that access rights to these files remain restricted to prevent unauthorized access to the ReadStore database (see Installation). By default, the secret key and configuration files are stored in your home directory (<code>~/.rs-server/</code>), but you can change the <code>--config-directory</code> to specify a different folder path.</p> <p>The ReadStore secret key is located in your <code>--config-dir</code> (default <code>~/.rs-server/secret_key</code>). It is recommended to keep a secured copy of the secret key to allow access to backups or restore the database in case of an incident.</p>"},{"location":"readme/#admin-account","title":"Admin Account","text":"<p>Upon the first launch of the ReadStore Basic web server, the Admin account is created with a password provided along with your license key.</p> <p>The Admin must change the Admin password immediately upon the first login.</p>"},{"location":"readme/#user-account-passwords-and-tokens","title":"User Account Passwords and Tokens","text":"<p>To log in to the ReadStore web app via a web browser, each User needs a user account. User accounts are created by the Admin from within the web app. The Admin sets an account password when creating new users. Each User can later change their account password.</p> <p>Each User has a unique Token assigned, which is required to connect to ReadStore via the Command-Line Interface (CLI) or through the Python and R SDKs. This token should not be shared. Tokens can be easily regenerated from the Settings page in the ReadStore CLI.</p> <p>A User is required to have staging permissions to upload FASTQ files into the ReadStore database.</p> <p>See Installation for instructions how to setup Users</p>"},{"location":"readme/#backups","title":"Backups","text":"<p>ReadStore automatically performs regular backups. The backup directory (see Installation) should be different from the database directory. ReadStore log files are also saved to a predefined folder. Each folder should have sufficient space to store database, backup, and log files.</p> <p>It is posible to export (dump) the database into <code>.json</code> and <code>.csv</code> files using the <code>readstore-server export</code> method. More information below the Export section. </p>"},{"location":"readme/#deployment-and-server-configurations","title":"Deployment and Server Configurations","text":"<p>You are responsible for hosting and deploying the ReadStore server in a secure environment. This includes, but is not limited to, access management, active firewall protection of your servers, and regular patching of your operating system.</p> <p>If you need a ReadStore version with more advanced permission and group management, database server support, or customization for your infrastructure, please reach out.</p>"},{"location":"readme/#installation-updates","title":"Installation &amp; Updates","text":"<p>NOTE Check the Installation Guide for more information and common sources of errors or contact support@evo-byte.com in case of technical problems. We will certainly find a solution.</p> <p>More information on updating a running ReadStore server can be found below.</p>"},{"location":"readme/#1-install-the-readstore-basic-server","title":"1. Install the ReadStore Basic Server","text":"<p>You need Python version 3.10 or higher to install ReadStore.</p> <p>You can perform the install in a conda or venv virtual environment to simplify package management. This is recommended to avoid potential conflicts in the required Python dependencies.</p> <p>Here is an example how to setup a virtual environment using the venv module:</p> <p><code>python -m venv .venv</code></p> <p><code>source .venv/bin/activate</code></p> <p>This provides you with a clean virtual environment avoiding potential issues with resolving Python dependencies. </p> <p>Next install the ReadStore Basic server.</p> <p><code>pip3 install readstore-basic</code></p> <p>A local install is also possible</p> <p><code>pip3 install --user readstore-basic</code></p> <p>Make sure that <code>~/.local/bin</code> is on your <code>$PATH</code> in case you encounter problems when starting the server.</p> <p>Validate the install by running</p> <p><code>readstore-server -v</code></p> <p>This should print the ReadStore Basic version</p>"},{"location":"readme/#2-start-the-webserver","title":"2. Start the Webserver","text":""},{"location":"readme/#prepare-output-folders","title":"Prepare Output Folders","text":"<p>Create output folders for the ReadStore database files (<code>db-directory</code>), the backups (<code>db-backup-directory</code>) and log files (<code>log-directory</code>).</p> <p>All ReadStore database, backup and log files are created with user-exclusive read/write permissions (<code>chmod 600</code>) when starting the ReadStore server for the first time. Make sure that restricted permissions are maintained to avoid unwanted access to database files.</p> <p>The readstore configuration files and secret key are by default written to you home dir <code>~/.rs-server</code> (user-exclusive read/write permissions <code>chmod 600</code>). You can specify another <code>config-directory</code>. Ensure restricted permissions for this folder and files. It is recommended to create a secure backup of the secret key </p>"},{"location":"readme/#start-the-server","title":"Start the Server","text":"<p><code>readstore-server --db-directory /path/to/database_dir --db-backup-directory /path/to/backup_dir --log-directory /path/to/logs_dir</code></p> <p>ReadStore Server requires ports 8000 and 8501. See below if there is a problem with blocked ports.</p> <p>The command will run the server in your current terminal session, but you probably want to keep your server running after closing the terminal. There are different options</p> <ul> <li>Use a terminal multiplexer like <code>screen</code> or <code>tmux</code> to start a persistent session and run the server from there</li> <li>Start the server with <code>nohup</code> to keep running after closing you session (<code>nohup readstore-server ...</code>)</li> <li>Configure a <code>systemd</code> service, which can for instance handle automatic (re)start procedures (s. below)</li> </ul> <p>You can configure the readstore-server using environment variables. This can be useful in containerized or cloud applications. (s. Advanced Configuration)</p>"},{"location":"readme/#what-if-my-server-terminates","title":"What if my Server Terminates?","text":"<p>The database and backups persist also if the ReadStore server is terminated or updated.  The database files remain stored in the <code>db-directory</code> or <code>db-backup-directory</code> folders.</p> <p>You can simply restart the <code>readstore-server</code> with the same directories, and you will be able to access all data in your database. </p> <p>NOTE The database files and backups must match to the secret key in your <code>config-dir</code>. Hence it is recommended to consistently use the <code>config-dir</code> with the same <code>db-directory</code> and <code>db-backup-directory</code> folders.</p>"},{"location":"readme/#3-connect-to-the-readstore-web-app-with-your-browser","title":"3. Connect to the ReadStore Web App with your Browser","text":"<p>After the launch of the webserver you should to be able to connect to the ReadStore web app from your browser.</p> <p>The ReadStore web app should be available via your browser under localhost port 8501 (<code>http://127.0.0.1:8501</code> or <code>http://localhost:8501/</code>). You should see a login screen.</p> <p>If you you want to connect to the ReadStore Web App from a remote connection, e.g. from you local PC via the browser, you may need to open the corresponing server ports or setup a SSH tunnel (s. below)</p> <p>NOTE The port can change depending on your server settings (s. Advanced Configuration).</p>"},{"location":"readme/#access-readstore-web-app-via-ssh-tunnel","title":"Access ReadStore Web App via SSH Tunnel","text":"<p>If you run ReadStore Basic on a Linux server that you connect to via SSH, consider using SSH tunneling / port forwarding to access the server port 8501 from your local machine's browser (Check this Tutorial). Tools like PuTTY help Windows users to easily set up SSH tunnels.</p> <p>In any case make sure that server connections are established in agreement with your organizations IT security guidelines or ask your IT admins for support. </p> <p>If you need support in making ReadStore available for users in your organization, reach out to info@evo-byte.com. We will find a solution for you!</p>"},{"location":"readme/#4-setup-admin-account-and-first-users","title":"4. Setup Admin Account and First Users","text":""},{"location":"readme/#change-your-admin-password-immediately","title":"Change your Admin password IMMEDIATELY!","text":"<p>Together with you ReadStore License Key you should have received a the login password for the Admin account.</p> <ol> <li>Log into the web app with the username <code>admin</code> and the received admin password</li> <li>Move to the <code>Settings</code> page and click the <code>Reset Password</code> button</li> <li>Enter a new password and <code>Confirm</code></li> <li>Login out and into the admin account again to validate the new password</li> </ol>"},{"location":"readme/#enter-your-license-key","title":"Enter your License Key","text":"<p>You need to enter your license key before you can create users.</p> <ol> <li>Log into the Admin account</li> <li>Move to the <code>Settings</code> page</li> <li>Click the <code>License Key</code> button. You should see information on the current status of you license</li> <li>Click <code>Enter New Key</code> and enter you license key and <code>Confirm</code></li> </ol> <p>This activates your license and you should see an expiration date and the maximum number of user/seats in the <code>License Key</code> overview.</p>"},{"location":"readme/#create-new-users","title":"Create new User(s)","text":"<ol> <li>Log into the Admin account, move to the <code>Admin</code> page</li> <li>Click the <code>Create</code> button to create a new user</li> <li>Add name, email and password. If the user should be allowed to upload FASTQ files you must enable <code>Staging Permissions</code></li> <li>Click <code>Confirm</code>. You should see the new user in the overview</li> </ol> <p>Users can change their password in their <code>Settings</code> page. The number of users is limited by the seats of your license.</p>"},{"location":"readme/#5-install-the-readstore-command-line-interface-cli","title":"5. Install the ReadStore Command Line Interface (CLI)","text":"<p>You need to install the ReadStore CLI if you want to upload FASTQ files and access ReadStore data from the CLI.</p> <p>For more information check the ReadStore CLI GitHub Repository</p> <p>NOTE Uploading FASTQ files requires users to have <code>staging permission</code> set in their account.  </p>"},{"location":"readme/#install-command","title":"Install Command","text":"<p><code>pip3 install readstore-cli</code></p> <p>Validate successful install by running</p> <p><code>readstore -v</code></p> <p>This should print the CLI's version</p>"},{"location":"readme/#configure-cli","title":"Configure CLI","text":"<p>You need to configure the ReadStore CLI client with your username and token. You can find and change you user <code>token</code> in the <code>Settings</code> page of your account. Click on <code>Token</code> to retrieve the token value.</p> <p>Run</p> <p><code>readstore configure</code></p> <p>Enter you <code>username</code>, <code>token</code>, and your preferred output format <code>json, text or csv</code>.</p> <p>Check the status of your CLI config with</p> <p><code>readstore configure list</code></p> <p>You should see the credentials you entered.</p>"},{"location":"readme/#update-an-existing-readstore-basic-server","title":"Update an existing ReadStore Basic Server","text":"<p>If you already have a running ReadStore Server and want to upgrade to a new version, follow these simple steps:</p> <p>0. Backup Validation</p> <p>Ensure that ReadStore database backups are in place and up-to-date (located in the --db-directory folder). Optionally, copy the latest backup file (.sqlite3) to a secure location for potential rollback.</p> <p>1. Stop the Running Server</p> <p>Stop the running server by terminating the server process or stopping the corresponding Linux service. This will not affect the data.</p> <p>2. Update the ReadStore-Basic Python Package</p> <p>Within the Python environment used to run the ReadStore Server, update the <code>readstore-basic</code> package by running the following command:</p> <p><code>pip install readstore-basic --upgrade</code></p> <p>After updating, verify that the new version is installed and the old version is removed:</p> <p><code>readstore-server -v</code></p> <p>This command should print the new version number.</p> <p>3. Restart the Server</p> <p>Restart the ReadStore Server with the same folder directories and settings as before the update.</p> <p>4. Continue Operations</p> <p>Resume your work as usual. If you encounter any questions or issues, contact support@evo-byte.com.</p>"},{"location":"readme/#advanced-readstore-basic-server-configuration","title":"Advanced ReadStore Basic Server Configuration","text":"<p><code>readstore-server -h</code></p> <pre><code>ReadStore Server\n\noptions:\n  -h, --help            show this help message and exit\n  --db-directory        Directory for Storing ReadStore Database.\n  --db-backup-directory\n                        Directory for Storing ReadStore Database Backups\n  --log-directory       Directory for Storing ReadStore Logs\n  --config-directory    Directory for storing readstore_server_config.yaml (~/.rs-server)\n  --django-port         Port of Django Backend\n  --streamlit-port      Port of Streamlit Frontend\n  --debug               Run In Debug Mode\n</code></pre> <p>ReadStore requires different directories for storing the database file, backups, logs and configurations. It is important to make sure that the user launching the ReadStore server (data owner) has read and write permissions for each folder. The files created have user-exclusive read/write permissions (<code>chmod 600</code>) by default and it is important to ensure that permissions are kept restrictive.</p> <p>You can run ReadStore in a more verbose <code>--debug</code> mode, which is not recommended.</p>"},{"location":"readme/#changing-server-ports","title":"Changing Server Ports","text":"<p>ReadStores uses a Django Webserver and Streamlit Frontend with default ports 8000 and 8501. If other applications are running on these ports, change the ports using the <code>--django-port</code> or <code>--streamlit-port</code> arguments to a free port.</p> <p>NOTE Changing ports requires users to connect to the webapp using a different port. Users also need to update their default CLI/SDK configurations. More information in the ReadStore CLI's README.</p>"},{"location":"readme/#configure-readstore-using-environment-variables","title":"Configure ReadStore using Environment Variables","text":"<p>In some cases you may want to setup the ReadStore server using environment variables, for instance if you run containers or cloud applications.</p> <p>The following environment variables can be used to configure the ReadStore server</p> <pre><code>RS_DB_DIRECTORY         Corresponds to db-directory argument\nRS_DB_BACKUP_DIRECTORY  Corresponds to db-backup-directory argument\nRS_LOG_DIRECTORY        Corresponds to log-directory argument\nRS_CONFIG_DIRECTORY     Corresponds to config-directory argument\nRS_DJANGO_PORT          Corresponds to django-port argument\nRS_STREAMLIT_PORT       Corresponds to streamlit-port argument\n\nRS_PYTHON      Path to Python executable    (default: python3)\nRS_STREAMLIT   Path to Streamlit executable (default: streamlit)\nRS_GUNICORN    Path to Gunicorn executable  (default: gunicorn)\n</code></pre>"},{"location":"readme/#create-readstore-systemd-linux-service","title":"Create ReadStore systemd Linux service","text":"<p>Creating a Linux service has the several advantages for running the ReadStore server.  A service can take case of automatic restart of the ReadStore server in case of an update or crash of you Linux server.</p> <p>You find here a starting point for setting up a service using <code>systemd</code> but you may need superuser (<code>sudo</code>) privileges to actually start the service. Get in touch with you IT admins if you need support.</p> <ol> <li> <p>Check the <code>readstore.service</code> file provided here in the repository and adapt it with your environment configurations</p> <ul> <li><code>User</code>: Linux Username to run service. Will be the Data Owner for database files, logs, secrets and config.</li> <li><code>WorkingDirectory</code>: Choose working directory for service</li> <li><code>ExecStart</code>: Command to run readstore-server. You need to define the python to the Python install you want to use (check with <code>which python</code>) and the path to the <code>readstore_server.py</code>, which is typically in your python3 site packages folder (e.g. <code>.local/lib/python3.11/site-packages/readstore_basic/readstore_server.py</code>). Specify the path to the database files, backup, config and logs in the ExecStart</li> <li><code>Environment=RS_STREAMLIT</code>: Path to Streamlit executable (run <code>which streamlit</code> to find the path)</li> <li><code>Environment=RS_PYTHON</code>: Path to Python executable (run <code>which python</code> to find the path). Should be   the same as in ExecStart</li> <li><code>Environment=RS_GUNICORN</code>: Path to Gunicorn executable (run <code>which gunicorn</code> to find the path)</li> </ul> </li> <li> <p>Copy the <code>readstore.service</code> file to the system folder</p> <p><code>cp readstore.service /etc/systemd/system/readstore.service</code></p> </li> <li> <p>Reload the Systemd Deamon</p> <p><code>sudo systemctl daemon-reload</code></p> </li> <li> <p>Enable and Start the Service</p> <p><code>sudo systemctl enable readstore.service</code></p> <p><code>sudo systemctl start readstore.service</code></p> </li> <li> <p>Check service status</p> <p><code>sudo systemctl status readstore.service</code></p> </li> <li> <p>Check service logs</p> <p><code>sudo journalctl -u readstore.service -f</code></p> </li> <li> <p>Stop or Restart Service</p> <p>Restarting might be required after installing a ReadStore Basic update</p> <p><code>sudo systemctl stop readstore.service</code></p> <p><code>sudo systemctl restart readstore.service</code></p> </li> </ol>"},{"location":"readme/#export-dump-readstore-database","title":"Export (Dump) ReadStore Database","text":"<p>In some cases it might be necessary to retrieve the full database content including all tables in a flat file format (i.e. json or csv). This includes attachment files which have been uploaded for projects or datasets.</p> <p>The <code>readstore-server export</code> command dump the database and stored files.</p> <pre><code>usage: readstore-server export [-h] [--config-directory] [--export_directory]\n\noptions:\n  -h, --help           show this help message and exit\n  --config-directory   Directory containing ReadStore Database (required)\n  --export_directory   Directory for storing exported ReadStore Database files (required)\n</code></pre> <p>Example <code>readstore export --config-directory /path/to/config --export_directory /path/to/export_files</code></p> <p>The tables are exported as <code>.csv</code> and <code>.json</code> files. Project and Datasets attachment files are exported in their original file format, each in a separate folder for each Project or Dataset.</p>"},{"location":"readme/#readstore-api","title":"ReadStore API","text":"<p>The ReadStore Basic server provides a RESTful API for accessing resources via HTTP requests. This API extends the functionalities of the ReadStore CLI as well as the Python and R SDKs.</p>"},{"location":"readme/#api-endpoint","title":"API Endpoint","text":"<p>By default, the API is accessible at: <code>http://127.0.0.1:8000/api_x_v1/</code></p>"},{"location":"readme/#authentication","title":"Authentication","text":"<p>Users must authenticate using their username and token via the Basic Authentication scheme.</p>"},{"location":"readme/#example-usage","title":"Example Usage","text":"<p>Below is an example demonstrating how to use the ReadStore CLI to retrieve an overview of Projects by sending an HTTP <code>GET</code> request to the <code>project/</code> endpoint. In this example, the username is <code>testuser</code>, and the token is <code>0dM9qSU0Q5PLVgDrZRftzw</code>. You can find your token in the ReadStore settings.</p> <pre><code>curl -X GET -u testuser:0dM9qSU0Q5PLVgDrZRftzw http://localhost:8000/api_x_v1/project/\n</code></pre>"},{"location":"readme/#example-reponse","title":"Example Reponse","text":"<p>A successful HTTP response returns a JSON-formatted string describing the project(s) in the ReadStore database. Example response:</p> <pre><code>[{\n  \"id\": 4,\n  \"name\": \"TestProject99\",\n  \"metadata\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"attachments\": []\n}]\n</code></pre>"},{"location":"readme/#documentation","title":"Documentation","text":"<p>Comprehensive API documentation is available in the ReadStore Basic Docs.</p>"},{"location":"readme/#usage","title":"Usage","text":"<p>Detailed tutorials, videos and explanations are found on YouTube or on the EVOBYTE blog.</p>"},{"location":"readme/#quickstart","title":"Quickstart","text":"<p>Let's upload some FASTQ files.</p>"},{"location":"readme/#1-account-settings","title":"1. Account Settings","text":"<p>Make sure you have the ReadStore CLI installed and configured (s. Installation).</p> <p>Run the command to check if your configuration is in place.</p> <p><code>readstore configure list</code></p> <p>For uploading FASTQ files your User Account needs to have <code>Staging Permission</code>. Check this in the <code>Settings</code> page of your account. If you do not have <code>Staging Permission</code>, ask the Admin to grant you permission.</p>"},{"location":"readme/#2-upload-files","title":"2. Upload Files","text":"<p>Move to a folder that contains some FASTQ files.</p> <p><code>readstore upload myfile_r1.fastq</code></p> <p>This will upload the file and run the QC check. You can select several files at once using the <code>*</code> wildcard.</p> <p>You can also upload multiple FASTQ files at once using the import function or perform a <code>Import From File</code> form the ReadStore app staging page. </p>"},{"location":"readme/#3-stage-files","title":"3. Stage Files","text":"<p>Login to the User Interface on your browser and move to the <code>Staging</code> page. Here you find a list of all FASTQ files you just upload.</p> <p>For large files the QC step can take a while to complete. FASTQ files are grouped in Datasets which you can <code>Check In</code>. Then they appear in the <code>Datasets</code> page.</p> <p>If you uploaded a large number of FASTQ files at once, you can Check In multiple FASTQ files at once using the <code>Batch Check In</code> function. For this, click on <code>More</code> in the top right and select <code>Batch Check In</code>. Select all datasets that you want to check in and confirm.</p> <p>Under <code>More</code>, you also find the <code>Import From File</code> method that allows you to get and upload Excel or .csv files with FASTQ paths to upload. </p>"},{"location":"readme/#4-access-datasets-via-the-cli","title":"4. Access Datasets via the CLI","text":"<p>The ReadStore CLI enables programmatic access to Projects, Datasets, metadata and attachments.</p> <p>Some example commands are:</p> <p><code>readstore dataset list</code>  List all datasets</p> <p><code>readstore dataset get --id 25</code>  Get detailed view on Dataset 25</p> <p><code>readstore dataset get --id 25 --read1-path</code>  Get path for Read1 FASTQ file</p> <p><code>readstore dataset get --id 25 --meta</code>  Get metadata for Dataset 25</p> <p><code>readstore project get --name cohort1 --attachment</code>  Get attachment files for Project \"cohort1\"</p> <p>You can find a full documentation in the ReadStore CLI Repository</p>"},{"location":"readme/#5-managing-processed-data","title":"5. Managing Processed Data","text":"<p>Processed Data refer to files generated through processing of raw sequencing data. Depending on the omics technology and assay used, this could be a transcript count file, variant files or gene count matrices. </p> <p>ProData are attached to Datasets, and can be uploaded via the ReadStore CLI or R &amp; Python SDKs. You can check the ProData for each Dataset in the ReadStore App under the <code>Datasets</code> section.</p> <p>Processed Data are not directly uploaded to the ReadStore database, but similar to raw datasets their path are stored in the database and validated.</p> <p>Here's an example how to upload, retrieve and delete a processed file.</p> <p>NOTE Your user account is required to have <code>Staging Permissions</code> to upload and delete ProData files:</p> <p><code>readstore pro-data upload -d test_dataset_1 -n test_dataset_count_matrix -t count_matrix test_count_matrix.h5</code> Upload count matrix test_count_matrix.h5 with name \"test_dataset_count_matrix\" for dataset with name \"test_dataset_1\"</p> <p><code>readstore pro-data list</code> List Processed Data for all Datasets and Projects</p> <p><code>readstore pro-data get -d test_dataset_1 -n test_dataset_count_matrix</code> Get ProData details for Dataset \"test_dataset_1\" with the name \"test_dataset_count_matrix\"</p> <p><code>readstore pro-data delete -d test_dataset_1 -n test_dataset_count_matrix</code> Delete ProData for dataset \"test_dataset_1\" with the name \"test_dataset_count_matrix\"</p> <p>The delete operation does not remove the file from the file system, only from the database.</p>"},{"location":"readme/#contributing","title":"Contributing","text":"<p>Please feel free to create an issue for problems with the software or feature suggestions.</p>"},{"location":"readme/#license","title":"License","text":"<p>ReadStore Basic Server is distributed under a commercial/proprietary license. Details are found in the LICENSE file.</p> <p>You need a license key for using ReadStore Basic, please check the ReadStore website for more information or reach out to license@evo-byte.com. Using ReadStore Basic without a valid license key is not permitted.</p> <p>ReadStore CLI is distributed under an Open Source Apache 2.0 License.</p>"},{"location":"readme/#credits-and-acknowledgments","title":"Credits and Acknowledgments","text":"<p>ReadStore Basic is built upon the following open-source python packages and would like to thank all contributing authors, developers and partners.</p> <p>Check the LICENSE file for a full list of attributions and third-party license information.</p> <ul> <li>Django (https://www.djangoproject.com/)</li> <li>djangorestframework (https://www.django-rest-framework.org/)</li> <li>requests (https://requests.readthedocs.io/en/latest/)</li> <li>gunicorn (https://gunicorn.org/)</li> <li>pysam (https://pysam.readthedocs.io/en/latest/api.html)</li> <li>pyyaml (https://pyyaml.org/)</li> <li>streamlit (https://streamlit.io/)</li> <li>pydantic (https://docs.pydantic.dev/latest/)</li> <li>pandas (https://pandas.pydata.org/)</li> <li>python (https://www.python.org/)</li> </ul>"},{"location":"rest_api/","title":"API Reference","text":""},{"location":"rest_api/#readstore-basic-external-rest-api-100","title":"ReadStore Basic External REST API 1.0.0","text":"<p>OpenAPI 3.1.0 specification for the ReadStore Basic external REST API. This API can be access from program code to automate generation, update and retrieval of elements in ReadStore</p>"},{"location":"rest_api/#servers","title":"Servers","text":"Description URL External REST API for Local ReadStore server. Port can vary by deployment. https://127.0.0.1:8000/api_x_v1/"},{"location":"rest_api/#endpoints","title":"Endpoints","text":""},{"location":"rest_api/#post-api_x_v1auth_token","title":"POST /api_x_v1/auth_token/","text":"<p>Endpoint to validate user credentials through HTTP Basic Authentication.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 401 Unauthorized </p>"},{"location":"rest_api/#get-api_x_v1project","title":"GET /api_x_v1/project/","text":"<p>List all projects</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>project_id</code> query integer No <code>project_name</code> query string No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"dataset_metadata_keys\": {\n            \"type\": \"dict\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#post-api_x_v1project","title":"POST /api_x_v1/project/","text":"<p>Create a new project</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"metadata\": {\n        \"type\": \"dict\"\n    },\n    \"dataset_metadata_keys\": {\n        \"type\": \"dict\"\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"dataset_metadata_keys\": {\n            \"type\": \"dict\"\n        }\n    }\n}\n</code></pre> <p> Response 201 Created </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"dataset_metadata_keys\": {\n            \"type\": \"dict\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#get-api_x_v1projectpk","title":"GET /api_x_v1/project/{pk}/","text":"<p>Retrieve a project by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"dataset_metadata_keys\": {\n            \"type\": \"dict\"\n        }\n    }\n}\n</code></pre> <p> Response 404 Not Found </p>"},{"location":"rest_api/#delete-api_x_v1projectpk","title":"DELETE /api_x_v1/project/{pk}/","text":"<p>Delete a project by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"rest_api/#get-api_x_v1project_attachment","title":"GET /api_x_v1/project_attachment/","text":"<p>List of project attachments or project attachment object including \"body\" field</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>attachment_name</code> query string No <code>project_id</code> query integer No <code>project_name</code> query string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"owner\": 0,\n    \"created\": \"string\",\n    \"updated\": \"string\",\n    \"valid_from\": \"string\",\n    \"valid_to\": \"string\",\n    \"project\": 0,\n    \"size_mb\": 0,\n    \"filetype\": \"string\",\n    \"body\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"owner\": {\n            \"type\": \"integer\"\n        },\n        \"created\": {\n            \"type\": \"string\"\n        },\n        \"updated\": {\n            \"type\": \"string\"\n        },\n        \"valid_from\": {\n            \"type\": \"string\"\n        },\n        \"valid_to\": {\n            \"type\": \"string\"\n        },\n        \"project\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"filetype\": {\n            \"type\": \"string\"\n        },\n        \"body\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#get-api_x_v1project_attachmentpk","title":"GET /api_x_v1/project_attachment/{pk}/","text":"<p>Retrieve a project attachment by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"owner\": 0,\n    \"created\": \"string\",\n    \"updated\": \"string\",\n    \"valid_from\": \"string\",\n    \"valid_to\": \"string\",\n    \"project\": 0,\n    \"size_mb\": 0,\n    \"filetype\": \"string\",\n    \"body\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"owner\": {\n            \"type\": \"integer\"\n        },\n        \"created\": {\n            \"type\": \"string\"\n        },\n        \"updated\": {\n            \"type\": \"string\"\n        },\n        \"valid_from\": {\n            \"type\": \"string\"\n        },\n        \"valid_to\": {\n            \"type\": \"string\"\n        },\n        \"project\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"filetype\": {\n            \"type\": \"string\"\n        },\n        \"body\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#get-api_x_v1fq_dataset","title":"GET /api_x_v1/fq_dataset/","text":"<p>List all fq datasets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>dataset_id</code> query integer No <code>dataset_name</code> query string No <code>project_id</code> query integer No <code>project_name</code> query string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"qc_passed\": true,\n    \"paired_end\": true,\n    \"index_read\": true,\n    \"project_ids\": [],\n    \"project_names\": [],\n    \"metadata\": {\n        \"type\": \"dict\"\n    },\n    \"attachments\": [],\n    \"pro_data\": []\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"paired_end\": {\n            \"type\": \"boolean\"\n        },\n        \"index_read\": {\n            \"type\": \"boolean\"\n        },\n        \"project_ids\": {\n            \"type\": \"array\"\n        },\n        \"project_names\": {\n            \"type\": \"array\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"attachments\": {\n            \"type\": \"array\"\n        },\n        \"pro_data\": {\n            \"type\": \"array\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#post-api_x_v1fq_dataset","title":"POST /api_x_v1/fq_dataset/","text":"<p>Create a new fq dataset</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p> Response 201 Created </p> application/json <p><pre><code>{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"qc_passed\": true,\n    \"paired_end\": true,\n    \"index_read\": true,\n    \"project_ids\": [],\n    \"project_names\": [],\n    \"fq_file_r1\": 0,\n    \"fq_file_r2\": 0,\n    \"fq_file_i1\": 0,\n    \"fq_file_i2\": 0,\n    \"metadata\": {\n        \"type\": \"dict\"\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"paired_end\": {\n            \"type\": \"boolean\"\n        },\n        \"index_read\": {\n            \"type\": \"boolean\"\n        },\n        \"project_ids\": {\n            \"type\": \"array\"\n        },\n        \"project_names\": {\n            \"type\": \"array\"\n        },\n        \"fq_file_r1\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_r2\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_i1\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_i2\": {\n            \"type\": \"integer\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#get-api_x_v1fq_datasetpk","title":"GET /api_x_v1/fq_dataset/{pk}/","text":"<p>Retrieve an fq dataset by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"qc_passed\": true,\n    \"paired_end\": true,\n    \"index_read\": true,\n    \"project_ids\": [],\n    \"project_names\": [],\n    \"created\": \"string\",\n    \"fq_file_r1\": 0,\n    \"fq_file_r2\": 0,\n    \"fq_file_i1\": 0,\n    \"fq_file_i2\": 0,\n    \"metadata\": {\n        \"type\": \"dict\"\n    },\n    \"attachments\": [],\n    \"pro_data\": []\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"paired_end\": {\n            \"type\": \"boolean\"\n        },\n        \"index_read\": {\n            \"type\": \"boolean\"\n        },\n        \"project_ids\": {\n            \"type\": \"array\"\n        },\n        \"project_names\": {\n            \"type\": \"array\"\n        },\n        \"created\": {\n            \"type\": \"string\"\n        },\n        \"fq_file_r1\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_r2\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_i1\": {\n            \"type\": \"integer\"\n        },\n        \"fq_file_i2\": {\n            \"type\": \"integer\"\n        },\n        \"metadata\": {\n            \"type\": \"dict\"\n        },\n        \"attachments\": {\n            \"type\": \"array\"\n        },\n        \"pro_data\": {\n            \"type\": \"array\"\n        }\n    }\n}\n</code></pre> <p> Response 404 Not Found </p>"},{"location":"rest_api/#delete-api_x_v1fq_datasetpk","title":"DELETE /api_x_v1/fq_dataset/{pk}/","text":"<p>Delete an fq dataset by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 204 No Content </p> <p> Response 404 Not Found </p>"},{"location":"rest_api/#get-api_x_v1fq_attachment","title":"GET /api_x_v1/fq_attachment/","text":"<p>List all fq attachments</p> Description <p>List of fq attachments. Specifying a dataset_name or dataset_id plus attachment_name returns a single fq attachment object including \"body\" field (s. detail view).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>attachment_name</code> query string No <code>dataset_id</code> query integer No <code>dataset_name</code> query string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"owner\": 0,\n    \"created\": \"string\",\n    \"updated\": \"string\",\n    \"valid_from\": \"string\",\n    \"valid_to\": \"string\",\n    \"fq_dataset\": 0,\n    \"size_mb\": 0,\n    \"filetype\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"owner\": {\n            \"type\": \"integer\"\n        },\n        \"created\": {\n            \"type\": \"string\"\n        },\n        \"updated\": {\n            \"type\": \"string\"\n        },\n        \"valid_from\": {\n            \"type\": \"string\"\n        },\n        \"valid_to\": {\n            \"type\": \"string\"\n        },\n        \"fq_dataset\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"filetype\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#get-api_x_v1fq_attachmentpk","title":"GET /api_x_v1/fq_attachment/{pk}/","text":"<p>Retrieve an fq attachment by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"owner\": 0,\n    \"created\": \"string\",\n    \"updated\": \"string\",\n    \"valid_from\": \"string\",\n    \"valid_to\": \"string\",\n    \"fq_dataset\": 0,\n    \"size_mb\": 0,\n    \"filetype\": \"string\",\n    \"body\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"owner\": {\n            \"type\": \"integer\"\n        },\n        \"created\": {\n            \"type\": \"string\"\n        },\n        \"updated\": {\n            \"type\": \"string\"\n        },\n        \"valid_from\": {\n            \"type\": \"string\"\n        },\n        \"valid_to\": {\n            \"type\": \"string\"\n        },\n        \"fq_dataset\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"filetype\": {\n            \"type\": \"string\"\n        },\n        \"body\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#post-api_x_v1fq_file_upload","title":"POST /api_x_v1/fq_file_upload/","text":"<p>Upload an fq file</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"fq_file_path\": \"string\",\n    \"fq_file_name\": \"string\",\n    \"read_type\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"fq_file_path\": {\n            \"type\": \"string\"\n        },\n        \"fq_file_name\": {\n            \"type\": \"string\"\n        },\n        \"read_type\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"rest_api/#get-api_x_v1fq_file","title":"GET /api_x_v1/fq_file/","text":"<p>List all fq files</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"read_type\": \"string\",\n    \"qc_passed\": true,\n    \"read_length\": 0,\n    \"num_reads\": 0,\n    \"size_mb\": 0,\n    \"qc_phred_mean\": 10.12,\n    \"creator\": \"string\",\n    \"upload_path\": \"string\",\n    \"md5_checksum\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"read_type\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"read_length\": {\n            \"type\": \"integer\"\n        },\n        \"num_reads\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"qc_phred_mean\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n        },\n        \"creator\": {\n            \"type\": \"string\"\n        },\n        \"upload_path\": {\n            \"type\": \"string\"\n        },\n        \"md5_checksum\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#post-api_x_v1fq_file","title":"POST /api_x_v1/fq_file/","text":"<p>Create a new fq file</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"name\": \"string\",\n    \"read_type\": \"string\",\n    \"qc_passed\": true,\n    \"read_length\": 0,\n    \"num_reads\": 0,\n    \"size_mb\": 0,\n    \"qc_phred_mean\": 10.12,\n    \"qc_phred\": {\n        \"type\": \"dict\"\n    },\n    \"upload_path\": \"string\",\n    \"md5_checksum\": \"string\",\n    \"staging\": true,\n    \"pipeline_version\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"read_type\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"read_length\": {\n            \"type\": \"integer\"\n        },\n        \"num_reads\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"qc_phred_mean\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n        },\n        \"qc_phred\": {\n            \"type\": \"dict\"\n        },\n        \"upload_path\": {\n            \"type\": \"string\"\n        },\n        \"md5_checksum\": {\n            \"type\": \"string\"\n        },\n        \"staging\": {\n            \"type\": \"boolean\"\n        },\n        \"pipeline_version\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre> <p> Response 201 Created </p>"},{"location":"rest_api/#get-api_x_v1fq_filepk","title":"GET /api_x_v1/fq_file/{pk}/","text":"<p>Retrieve an fq file by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 0,\n    \"name\": \"string\",\n    \"read_type\": \"string\",\n    \"qc_passed\": true,\n    \"read_length\": 0,\n    \"num_reads\": 0,\n    \"size_mb\": 0,\n    \"qc_phred_mean\": 10.12,\n    \"creator\": \"string\",\n    \"upload_path\": \"string\",\n    \"md5_checksum\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"read_type\": {\n            \"type\": \"string\"\n        },\n        \"qc_passed\": {\n            \"type\": \"boolean\"\n        },\n        \"read_length\": {\n            \"type\": \"integer\"\n        },\n        \"num_reads\": {\n            \"type\": \"integer\"\n        },\n        \"size_mb\": {\n            \"type\": \"integer\"\n        },\n        \"qc_phred_mean\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n        },\n        \"creator\": {\n            \"type\": \"string\"\n        },\n        \"upload_path\": {\n            \"type\": \"string\"\n        },\n        \"md5_checksum\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"rest_api/#delete-api_x_v1fq_filepk","title":"DELETE /api_x_v1/fq_file/{pk}/","text":"<p>Delete an fq file by ID</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>BasicAuth</code> header string N/A No <code>pk</code> path integer No <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"rest_api/#schemas","title":"Schemas","text":""},{"location":"rest_api/#fqdataset","title":"FqDataset","text":"Name Type <code>attachments</code> Array&lt;&gt; <code>description</code> string <code>id</code> integer <code>index_read</code> boolean <code>metadata</code> <code>name</code> string <code>paired_end</code> boolean <code>pro_data</code> Array&lt;&gt; <code>project_ids</code> Array&lt;&gt; <code>project_names</code> Array&lt;&gt; <code>qc_passed</code> boolean"},{"location":"rest_api/#fqdatasetattachment","title":"FqDatasetAttachment","text":"Name Type <code>created</code> string <code>description</code> string <code>filetype</code> string <code>fq_dataset</code> integer <code>id</code> integer <code>name</code> string <code>owner</code> integer <code>size_mb</code> integer <code>updated</code> string <code>valid_from</code> string <code>valid_to</code> string"},{"location":"rest_api/#fqdatasetattachmentdetail","title":"FqDatasetAttachmentDetail","text":"Name Type <code>body</code> string <code>created</code> string <code>description</code> string <code>filetype</code> string <code>fq_dataset</code> integer <code>id</code> integer <code>name</code> string <code>owner</code> integer <code>size_mb</code> integer <code>updated</code> string <code>valid_from</code> string <code>valid_to</code> string"},{"location":"rest_api/#fqdatasetdetail","title":"FqDatasetDetail","text":"Name Type <code>attachments</code> Array&lt;&gt; <code>created</code> string <code>description</code> string <code>fq_file_i1</code> integer <code>fq_file_i2</code> integer <code>fq_file_r1</code> integer <code>fq_file_r2</code> integer <code>id</code> integer <code>index_read</code> boolean <code>metadata</code> <code>name</code> string <code>paired_end</code> boolean <code>pro_data</code> Array&lt;&gt; <code>project_ids</code> Array&lt;&gt; <code>project_names</code> Array&lt;&gt; <code>qc_passed</code> boolean"},{"location":"rest_api/#fqdatasetpost","title":"FqDatasetPost","text":"Name Type <code>description</code> string <code>fq_file_i1</code> integer <code>fq_file_i2</code> integer <code>fq_file_r1</code> integer <code>fq_file_r2</code> integer <code>index_read</code> boolean <code>metadata</code> <code>name</code> string <code>paired_end</code> boolean <code>project_ids</code> Array&lt;&gt; <code>project_names</code> Array&lt;&gt; <code>qc_passed</code> boolean"},{"location":"rest_api/#fqfile","title":"FqFile","text":"Name Type <code>creator</code> string <code>id</code> integer <code>md5_checksum</code> string <code>name</code> string <code>num_reads</code> integer <code>qc_passed</code> boolean <code>qc_phred_mean</code> number(float) <code>read_length</code> integer <code>read_type</code> string <code>size_mb</code> integer <code>upload_path</code> string"},{"location":"rest_api/#fqfilepost","title":"FqFilePost","text":"Name Type <code>md5_checksum</code> string <code>name</code> string <code>num_reads</code> integer <code>pipeline_version</code> string <code>qc_passed</code> boolean <code>qc_phred</code> <code>qc_phred_mean</code> number(float) <code>read_length</code> integer <code>read_type</code> string <code>size_mb</code> integer <code>staging</code> boolean <code>upload_path</code> string"},{"location":"rest_api/#fqfileupload","title":"FqFileUpload","text":"Name Type <code>fq_file_name</code> string <code>fq_file_path</code> string <code>read_type</code> string"},{"location":"rest_api/#projectarray","title":"ProjectArray","text":"<p>Type: Array&lt;&gt;</p>"},{"location":"rest_api/#projectattachmentarray","title":"ProjectAttachmentArray","text":"<p>Type: Array&lt;&gt;</p>"},{"location":"rest_api/#projectattachmentobject","title":"ProjectAttachmentObject","text":"Name Type <code>body</code> string <code>created</code> string <code>description</code> string <code>filetype</code> string <code>id</code> integer <code>name</code> string <code>owner</code> integer <code>project</code> integer <code>size_mb</code> integer <code>updated</code> string <code>valid_from</code> string <code>valid_to</code> string"},{"location":"rest_api/#projectpost","title":"ProjectPost","text":"Name Type <code>dataset_metadata_keys</code> <code>description</code> string <code>metadata</code> <code>name</code> string"}]}